pipeline {
    agent {
        kubernetes {
            yamlFile 'pod.yaml'  // Reference the pod.yaml stored in the GitHub repository
        }
    }

    environment {
        DOCKER_IMAGE = "daudidrees/aks-k8s-rollouts"
        APP_NAME = "my-jenkins-rollback-deployments"
        ARGOCD_USERNAME = 'admin'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        KUBE_TOKEN = credentials('my_kubernetes')
        GITHUB_TOKEN = credentials('github-token')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    git url: 'https://github.com/Daudkhan1/aks-k8s-rollouts.git', branch: 'main'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                container('docker') {
                    sh "docker build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} ."
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                container('trivy') {
                    sh "trivy image --exit-code 0 --severity HIGH,CRITICAL ${DOCKER_IMAGE}:${BUILD_NUMBER}"
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                container('docker') {
                    withDockerRegistry([credentialsId: 'dockerhub-credentials', url: '']) {
                        sh "docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}"
                    }
                }
            }
        }

stage('Update Kubernetes Manifests') {
    steps {
        script {
            sh """
            sed -i 's|newTag: .*|newTag: \"${BUILD_NUMBER}\"|' menifests/kustomization.yaml
            git config --global user.email "daudidrees1024@gmail.com"
            git config --global user.name "Daudkhan1"
            git add menifests/kustomization.yaml
            git commit -m "Update image tag to ${BUILD_NUMBER}"
            git push https://Daudkhan1:${GITHUB_TOKEN}@github.com/Daudkhan1/aks-k8s-rollouts.git main
            """
        }
    }
}
stage('Apply Rollout') {
    steps {
        script {
            // Ensure the latest changes are pulled before applying
            sh "git pull origin main"

            // Apply kustomization with the updated image tag
            sh "kubectl apply -k menifests/"
            sh "kubectl rollout status deployment/nodejs-app -n nodejs"
        }
    }
}



        stage('Rollback on Failure') {
            steps {
                script {
                    def rollout_status = sh(script: "kubectl get deployment nodejs-app -n nodejs -o jsonpath='{.status.conditions[?(@.type==\"Progressing\")].status}'", returnStdout: true).trim()
                    
                    if (rollout_status != "True") {
                        echo "üö® Deployment failed! Rolling back..."
                        sh "kubectl rollout undo deployment nodejs-app -n nodejs"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo '‚úÖ Deployment completed successfully!'
        }
        failure {
            echo '‚ùå Deployment failed!'
        }
    }
}
