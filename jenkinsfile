pipeline {
    agent {
        kubernetes {
            yamlFile 'pod.yaml'  // Reference the pod.yaml stored in the GitHub repository
        }
    }

    environment {
        DOCKER_IMAGE = "daudidrees/aks-k8s-rollouts"
        APP_NAME = "my-jenkins-rollback-deployments"
        ARGOCD_USERNAME = 'admin'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        KUBE_TOKEN = credentials('my_kubernetes')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    git url: 'https://github.com/Daudkhan1/aks-k8s-rollouts.git', branch: 'main'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                container('docker') {
                    sh "docker build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} ."
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                container('trivy') {
                    sh "trivy image --exit-code 0 --severity HIGH,CRITICAL ${DOCKER_IMAGE}:${BUILD_NUMBER}"
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                container('docker') {
                    withDockerRegistry([credentialsId: 'dockerhub-credentials', url: '']) {
                        sh "docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage('Update Kubernetes Manifests') {
            steps {
                script {
                    sh "sed -i 's|newTag: .*|newTag: \"${BUILD_NUMBER}\"|' menifests/kustomization.yaml"
                }
            }
        }

        stage('Apply Rollout') {
            steps {
                sh "kubectl apply -k menifests/"
                sh "kubectl rollout status deployment/nodejs-app -n nodejs || true"
            }
        }

        stage('Rollback on Failure') {
            when {
                expression {
                    def rollout_status = sh(script: "kubectl get deployment nodejs-app -n nodejs -o jsonpath='{.status.conditions[?(@.type==\"Progressing\")].reason}'", returnStdout: true).trim()
                    return rollout_status == "ProgressDeadlineExceeded"
                }
            }
            steps {
                script {
                    echo "üö® Deployment exceeded progress deadline! Rolling back..."
                    sh "kubectl rollout undo deployment nodejs-app -n nodejs --to-revision=0"
                    echo "üî• Force deleting stuck pods..."
                    sh "kubectl delete pod -l app=nodejs-app -n nodejs --force --grace-period=0"
                    echo "üîÑ Rollback completed!"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo '‚úÖ Deployment completed successfully!'
        }
        failure {
            echo '‚ùå Deployment failed!'
        }
    }
}
