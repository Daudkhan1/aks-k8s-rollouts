pipeline {
    agent any

    environment {
        DOCKER_HOME = '/var/jenkins_home/docker'  // Path where Docker is installed in the Jenkins pod
        KUBECTL = '/var/jenkins_home/kubectl'  // Path to kubectl in the Jenkins pod
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')  // Docker Hub credentials ID in Jenkins
        KUBE_TOKEN = credentials('my_kubernetes')  // Jenkins-admin service account token
        ARGOCD_SERVER = 'http://192.168.49.3:31735'  // ArgoCD server IP
        ARGOCD_USERNAME = 'admin'
        ARGOCD_PASSWORD = credentials('argocd-password')  // ArgoCD credentials ID
        DOCKER_IMAGE = "daudidrees/aks-k8s-rollouts"
        APP_NAME = "my-jenkins-rollback-deployments"
        NAMESPACE = "nodejs"  // Kubernetes namespace for the app
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Clone the repository explicitly using the Git plugin
                    git url: 'https://github.com/Daudkhan1/aks-k8s-rollouts.git',
                        branch: 'main',  // Specify the branch you want to checkout
                        // credentialsId: 'your-github-credentials-id'  // GitHub credentials ID in Jenkins
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Use Docker directly from /var/jenkins_home/docker to build the image
                    sh "${DOCKER_HOME} build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} ."
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    // Push the Docker image to Docker Hub using Docker from /var/jenkins_home/docker
                    sh "${DOCKER_HOME} push ${DOCKER_IMAGE}:${BUILD_NUMBER}"
                }
            }
        }

        stage('Update Kubernetes Manifests') {
            steps {
                script {
                    // Update Kubernetes manifests using kustomize
                    sh """
                    cd manifests
                    kustomize edit set image ${APP_NAME}=${DOCKER_IMAGE}:${BUILD_NUMBER}
                    """
                }
            }
        }

        stage('Apply Kubernetes Changes') {
            steps {
                script {
                    // Apply Kubernetes manifests using kubectl from /var/jenkins_home/kubectl
                    sh """
                    export KUBECONFIG=/dev/null
                    ${KUBECTL} --server=https://kubernetes.default.svc \
                      --token=${KUBE_TOKEN} --insecure-skip-tls-verify \
                      apply -k ./manifests -n ${NAMESPACE}
                    """
                }
            }
        }

        stage('Sync with ArgoCD') {
            steps {
                script {
                    // Trigger ArgoCD to sync the changes
                    sh """
                    argocd login ${ARGOCD_SERVER} --username ${ARGOCD_USERNAME} --password ${ARGOCD_PASSWORD} --insecure
                    argocd app sync ${APP_NAME}
                    argocd app wait ${APP_NAME} --timeout 180
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()  // Clean up the workspace after the build
        }
        success {
            echo 'Deployment completed successfully!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
