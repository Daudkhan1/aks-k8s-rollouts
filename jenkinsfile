pipeline {
    agent {
        kubernetes {
            yamlFile 'pod.yaml'  // Reference the pod.yaml stored in the GitHub repository
        }
    }

    environment {
        DOCKER_IMAGE = "daudidrees/aks-k8s-rollouts"
        APP_NAME = "my-jenkins-rollback-deployments"
        // NAMESPACE = "nodejs"
        // ARGOCD_SERVER = 'http://192.168.49.3:31735'
        ARGOCD_USERNAME = 'admin'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        KUBE_TOKEN = credentials('my_kubernetes')
        // ARGOCD_PASSWORD = credentials('argocd-password')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    git url: 'https://github.com/Daudkhan1/aks-k8s-rollouts.git', branch: 'main'
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                container('trivy') {
                    sh "trivy image --exit-code 0 --severity HIGH,CRITICAL ${DOCKER_IMAGE}:latest"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                container('docker') {
                    sh "docker build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} ."
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                container('docker') {
                    withDockerRegistry([credentialsId: 'dockerhub-credentials', url: '']) {
                        sh "docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage('Update Kubernetes Manifests') {
            steps {
                script {
                    sh """
                    cd manifests
                    kustomize edit set image ${APP_NAME}=${DOCKER_IMAGE}:${BUILD_NUMBER}
                    """
                }
            }
        }

        stage('Apply Kubernetes Changes') {
            steps {
                script {
                    sh """
                    export KUBECONFIG=/dev/null
                    kubectl --server=https://kubernetes.default.svc \
                      --token=${KUBE_TOKEN} --insecure-skip-tls-verify \
                      apply -k ./manifests -n ${NAMESPACE}
                    """
                }
            }
        }

        stage('Sync with ArgoCD') {
            steps {
                script {
                    sh """
                    argocd login ${ARGOCD_SERVER} --username ${ARGOCD_USERNAME} --password ${ARGOCD_PASSWORD} --insecure
                    argocd app sync ${APP_NAME}
                    argocd app wait ${APP_NAME} --timeout 180
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Deployment completed successfully!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
