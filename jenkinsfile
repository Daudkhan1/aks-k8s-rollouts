pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials') // Replace with your Jenkins Docker Hub credentials ID
        KUBECONFIG = '/path/to/kubeconfig'  // Path to the kubeconfig for Minikube
        ARGOCD_SERVER = 'http://192.168.49.3:30007'  // Replace with your ArgoCD server IP
        ARGOCD_USERNAME = 'admin'
        ARGOCD_PASSWORD = credentials('argocd-password')  // Replace with your ArgoCD credentials ID
        DOCKER_IMAGE = "your-dockerhub-username/your-app-name"
        APP_NAME = "your-app-name"
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the repository
                checkout scm
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} ."
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'DOCKERHUB_CREDENTIALS') {
                        sh "docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage('Update Kubernetes Manifests') {
            steps {
                script {
                    // Update Kubernetes manifests (example using kustomize)
                    sh """
                    cd manifests
                    kustomize edit set image ${APP_NAME}=${DOCKER_IMAGE}:${BUILD_NUMBER}
                    """
                }
            }
        }

        stage('Apply Kubernetes Changes') {
            steps {
                script {
                    // Apply updated Kubernetes manifests
                    sh "kubectl apply -k ./manifests --kubeconfig=${KUBECONFIG}"
                }
            }
        }

        stage('Sync with ArgoCD') {
            steps {
                script {
                    // Trigger ArgoCD sync
                    sh """
                    argocd login ${ARGOCD_SERVER} --username ${ARGOCD_USERNAME} --password ${ARGOCD_PASSWORD} --insecure
                    argocd app sync ${APP_NAME}
                    argocd app wait ${APP_NAME} --timeout 180
                    """
                }
            }
        }
    }

    post {
        always {
            // Clean up workspace after build
            cleanWs()
        }
        success {
            echo 'Deployment completed successfully!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
